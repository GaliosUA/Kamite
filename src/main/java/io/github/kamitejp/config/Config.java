// generated by tscfg 0.9.998
// source: config/config.spec.hocon

package io.github.kamitejp.config;

@SuppressWarnings("PMD")
public record Config(
  Config.Chunk chunk,
  Config.Commands commands,
  boolean controlWindow,
  Config.Dev dev,
  Config.Keybindings keybindings,
  boolean launchBrowser,
  Config.Lookup lookup,
  Config.Ocr2 ocr,
  Config.Secrets secrets,
  Config.Server server,
  Config.Ui ui
) {
  static final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();

  public enum OCREngine {
    TESSERACT,
    MANGAOCR,
    MANGAOCR_ONLINE,
    OCRSPACE,
    NONE;
  }
  public enum UILayout {
    STANDARD,
    STANDARD_FLIPPED;
  }
  public static record Chunk(
    boolean correct,
    boolean flash,
    boolean showFurigana,
    int throttleMS,
    boolean translationOnlyMode
  ) {
    
    public Chunk(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        !c.hasPathOrNull("correct") || c.getBoolean("correct"),
        !c.hasPathOrNull("flash") || c.getBoolean("flash"),
        c.hasPathOrNull("showFurigana") && c.getBoolean("showFurigana"),
        c.hasPathOrNull("throttleMS") ? c.getInt("throttleMS") : 1000,
        c.hasPathOrNull("translationOnlyMode") && c.getBoolean("translationOnlyMode")
      );
    }
  }
  
  public static record Commands(
    java.util.List<Commands.CustomCommand> custom,
    Commands.Player player
  ) {
    public static record CustomCommand(
      java.lang.String command,
      java.lang.String name,
      java.lang.String symbol
    ) {
      
      public CustomCommand(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          $_reqStr(parentPath, c, "command", $tsCfgValidator),
          $_reqStr(parentPath, c, "name", $tsCfgValidator),
          $_reqStr(parentPath, c, "symbol", $tsCfgValidator)
        );
      }
      private static java.lang.String $_reqStr(java.lang.String parentPath, com.typesafe.config.Config c, java.lang.String path, $TsCfgValidator $tsCfgValidator) {
        if (c == null) return null;
        try {
          return c.getString(path);
        }
        catch(com.typesafe.config.ConfigException e) {
          $tsCfgValidator.addBadPath(parentPath + path, e);
          return null;
        }
      }
    
    }
    
    public static record Player(
      boolean showExtra
    ) {
      
      public Player(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          !c.hasPathOrNull("showExtra") || c.getBoolean("showExtra")
        );
      }
    }
    
    public Commands(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPathOrNull("custom") ? $_LCommands_CustomCommand(c.getList("custom"), parentPath, $tsCfgValidator) : null,
        c.hasPathOrNull("player") ? new Commands.Player(c.getConfig("player"), parentPath + "player.", $tsCfgValidator) : new Commands.Player(com.typesafe.config.ConfigFactory.parseString("player{}"), parentPath + "player.", $tsCfgValidator)
      );
    }
    private static java.util.List<Commands.CustomCommand> $_LCommands_CustomCommand(com.typesafe.config.ConfigList cl, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      java.util.ArrayList<Commands.CustomCommand> al = new java.util.ArrayList<>();
      for (com.typesafe.config.ConfigValue cv: cl) {
        al.add(new Commands.CustomCommand(((com.typesafe.config.ConfigObject)cv).toConfig(), parentPath, $tsCfgValidator));
      }
      return java.util.Collections.unmodifiableList(al);
    }
  }
  
  public static record Dev(
    boolean serveStaticInDevMode
  ) {
    
    public Dev(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPathOrNull("serveStaticInDevMode") && c.getBoolean("serveStaticInDevMode")
      );
    }
  }
  
  public static record Keybindings(
    Keybindings.Global global
  ) {
    public static record Global(
      Global.Ocr ocr
    ) {
      public static record Ocr(
        java.lang.String autoBlock,
        java.lang.String manualBlock
      ) {
        
        public Ocr(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
          this(
            c.hasPathOrNull("autoBlock") ? c.getString("autoBlock") : null,
            c.hasPathOrNull("manualBlock") ? c.getString("manualBlock") : null
          );
        }
      }
      
      public Global(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          c.hasPathOrNull("ocr") ? new Global.Ocr(c.getConfig("ocr"), parentPath + "ocr.", $tsCfgValidator) : new Global.Ocr(com.typesafe.config.ConfigFactory.parseString("ocr{}"), parentPath + "ocr.", $tsCfgValidator)
        );
      }
    }
    
    public Keybindings(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPathOrNull("global") ? new Keybindings.Global(c.getConfig("global"), parentPath + "global.", $tsCfgValidator) : new Keybindings.Global(com.typesafe.config.ConfigFactory.parseString("global{}"), parentPath + "global.", $tsCfgValidator)
      );
    }
  }
  
  public static record Lookup(
    java.util.List<Lookup.Target> targets
  ) {
    public static record Target(
      java.lang.String name,
      boolean newTab,
      java.lang.String symbol,
      java.lang.String url
    ) {
      
      public Target(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          $_reqStr(parentPath, c, "name", $tsCfgValidator),
          c.hasPathOrNull("newTab") && c.getBoolean("newTab"),
          $_reqStr(parentPath, c, "symbol", $tsCfgValidator),
          $_reqStr(parentPath, c, "url", $tsCfgValidator)
        );
      }
      private static java.lang.String $_reqStr(java.lang.String parentPath, com.typesafe.config.Config c, java.lang.String path, $TsCfgValidator $tsCfgValidator) {
        if (c == null) return null;
        try {
          return c.getString(path);
        }
        catch(com.typesafe.config.ConfigException e) {
          $tsCfgValidator.addBadPath(parentPath + path, e);
          return null;
        }
      }
    
    }
    
    public Lookup(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        $_LLookup_Target(c.getList("targets"), parentPath, $tsCfgValidator)
      );
    }
    private static java.util.List<Lookup.Target> $_LLookup_Target(com.typesafe.config.ConfigList cl, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      java.util.ArrayList<Lookup.Target> al = new java.util.ArrayList<>();
      for (com.typesafe.config.ConfigValue cv: cl) {
        al.add(new Lookup.Target(((com.typesafe.config.ConfigObject)cv).toConfig(), parentPath, $tsCfgValidator));
      }
      return java.util.Collections.unmodifiableList(al);
    }
  }
  
  public static record Ocr2(
    OCREngine engine,
    java.util.List<Ocr2.Region> regions,
    Ocr2.Tesseract tesseract,
    java.lang.String watchDir
  ) {
    public static record Region(
      boolean autoNarrow,
      java.lang.String description,
      int height,
      java.lang.String symbol,
      int width,
      int x,
      int y
    ) {
      
      public Region(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          c.hasPathOrNull("autoNarrow") && c.getBoolean("autoNarrow"),
          c.hasPathOrNull("description") ? c.getString("description") : null,
          $_reqInt(parentPath, c, "height", $tsCfgValidator),
          $_reqStr(parentPath, c, "symbol", $tsCfgValidator),
          $_reqInt(parentPath, c, "width", $tsCfgValidator),
          $_reqInt(parentPath, c, "x", $tsCfgValidator),
          $_reqInt(parentPath, c, "y", $tsCfgValidator)
        );
      }
      private static int $_reqInt(java.lang.String parentPath, com.typesafe.config.Config c, java.lang.String path, $TsCfgValidator $tsCfgValidator) {
        if (c == null) return 0;
        try {
          return c.getInt(path);
        }
        catch(com.typesafe.config.ConfigException e) {
          $tsCfgValidator.addBadPath(parentPath + path, e);
          return 0;
        }
      }
    
      private static java.lang.String $_reqStr(java.lang.String parentPath, com.typesafe.config.Config c, java.lang.String path, $TsCfgValidator $tsCfgValidator) {
        if (c == null) return null;
        try {
          return c.getString(path);
        }
        catch(com.typesafe.config.ConfigException e) {
          $tsCfgValidator.addBadPath(parentPath + path, e);
          return null;
        }
      }
    
    }
    
    public static record Tesseract(
      java.lang.String path
    ) {
      
      public Tesseract(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          c.hasPathOrNull("path") ? c.getString("path") : "tesseract"
        );
      }
    }
    
    public Ocr2(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPath("engine") ? OCREngine.valueOf(c.getString("engine").toUpperCase()) : OCREngine.NONE,
        c.hasPathOrNull("regions") ? $_LOcr2_Region(c.getList("regions"), parentPath, $tsCfgValidator) : null,
        c.hasPathOrNull("tesseract") ? new Ocr2.Tesseract(c.getConfig("tesseract"), parentPath + "tesseract.", $tsCfgValidator) : new Ocr2.Tesseract(com.typesafe.config.ConfigFactory.parseString("tesseract{}"), parentPath + "tesseract.", $tsCfgValidator),
        c.hasPathOrNull("watchDir") ? c.getString("watchDir") : null
      );
    }
    private static java.util.List<Ocr2.Region> $_LOcr2_Region(com.typesafe.config.ConfigList cl, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      java.util.ArrayList<Ocr2.Region> al = new java.util.ArrayList<>();
      for (com.typesafe.config.ConfigValue cv: cl) {
        al.add(new Ocr2.Region(((com.typesafe.config.ConfigObject)cv).toConfig(), parentPath, $tsCfgValidator));
      }
      return java.util.Collections.unmodifiableList(al);
    }
  }
  
  public static record Secrets(
    java.lang.String ocrspace
  ) {
    
    public Secrets(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPathOrNull("ocrspace") ? c.getString("ocrspace") : null
      );
    }
  }
  
  public static record Server(
    int port
  ) {
    
    public Server(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPathOrNull("port") ? c.getInt("port") : 4110
      );
    }
  }
  
  public static record Ui(
    UILayout layout,
    Ui.Notebook notebook
  ) {
    public static record Notebook(
      int height
    ) {
      
      public Notebook(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this(
          c.hasPathOrNull("height") ? c.getInt("height") : 60
        );
      }
    }
    
    public Ui(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this(
        c.hasPath("layout") ? UILayout.valueOf(c.getString("layout").toUpperCase()) : UILayout.STANDARD,
        c.hasPathOrNull("notebook") ? new Ui.Notebook(c.getConfig("notebook"), parentPath + "notebook.", $tsCfgValidator) : new Ui.Notebook(com.typesafe.config.ConfigFactory.parseString("notebook{}"), parentPath + "notebook.", $tsCfgValidator)
      );
    }
  }
  
  public Config(com.typesafe.config.Config c) {
    this(
      c.hasPathOrNull("chunk") ? new Config.Chunk(c.getConfig("chunk"), "chunk.", $tsCfgValidator) : new Config.Chunk(com.typesafe.config.ConfigFactory.parseString("chunk{}"), "chunk.", $tsCfgValidator),
      c.hasPathOrNull("commands") ? new Config.Commands(c.getConfig("commands"), "commands.", $tsCfgValidator) : new Config.Commands(com.typesafe.config.ConfigFactory.parseString("commands{}"), "commands.", $tsCfgValidator),
      !c.hasPathOrNull("controlWindow") || c.getBoolean("controlWindow"),
      c.hasPathOrNull("dev") ? new Config.Dev(c.getConfig("dev"), "dev.", $tsCfgValidator) : new Config.Dev(com.typesafe.config.ConfigFactory.parseString("dev{}"), "dev.", $tsCfgValidator),
      c.hasPathOrNull("keybindings") ? new Config.Keybindings(c.getConfig("keybindings"), "keybindings.", $tsCfgValidator) : new Config.Keybindings(com.typesafe.config.ConfigFactory.parseString("keybindings{}"), "keybindings.", $tsCfgValidator),
      !c.hasPathOrNull("launchBrowser") || c.getBoolean("launchBrowser"),
      c.hasPathOrNull("lookup") ? new Config.Lookup(c.getConfig("lookup"), "lookup.", $tsCfgValidator) : new Config.Lookup(com.typesafe.config.ConfigFactory.parseString("lookup{}"), "lookup.", $tsCfgValidator),
      c.hasPathOrNull("ocr") ? new Config.Ocr2(c.getConfig("ocr"), "ocr.", $tsCfgValidator) : new Config.Ocr2(com.typesafe.config.ConfigFactory.parseString("ocr{}"), "ocr.", $tsCfgValidator),
      c.hasPathOrNull("secrets") ? new Config.Secrets(c.getConfig("secrets"), "secrets.", $tsCfgValidator) : new Config.Secrets(com.typesafe.config.ConfigFactory.parseString("secrets{}"), "secrets.", $tsCfgValidator),
      c.hasPathOrNull("server") ? new Config.Server(c.getConfig("server"), "server.", $tsCfgValidator) : new Config.Server(com.typesafe.config.ConfigFactory.parseString("server{}"), "server.", $tsCfgValidator),
      c.hasPathOrNull("ui") ? new Config.Ui(c.getConfig("ui"), "ui.", $tsCfgValidator) : new Config.Ui(com.typesafe.config.ConfigFactory.parseString("ui{}"), "ui.", $tsCfgValidator)
    );
    $tsCfgValidator.validate();
  }
  private static final class $TsCfgValidator  {
    private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();
    
    void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
      badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
    }
    
    void validate() {
      if (!badPaths.isEmpty()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
        for (java.lang.String path : badPaths) {
          sb.append("\n    ").append(path);
        }
        throw new com.typesafe.config.ConfigException(sb.toString()) {};
      }
    }
  }
}
